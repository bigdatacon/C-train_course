Разработайте функцию img_lib::Color Negate(img_lib::Color c) для обращения цвета и функцию byte Negate(byte c) для обращения компоненты.
Обращение компоненты может быть реализовано так: byte{255 - to_integer<int>(b)}.

Задание
Читать изображение и писать его же — скучно. Эту же работу делает обычная программа cp. Преобразуем изображение по дороге.
Напишите программу, которая обращает изображение, делая из позитива негатив. Или из негатива позитив, в зависимости от того, оптимист вы или пессимист.
Программу можно будет использовать для получения негативных псов:
image
Добавьте в программу функцию:
void NegateInplace(img_lib::Image& image) 
Её задача — обратить изображение, заменив компоненту цвета со значением x на число 255 - x. Компоненту прозрачности менять не нужно. Обратить нужно три компоненты каждого пикселя.
Вызовите эту функцию в main после загрузки изображения, но перед сохранением. Программа будет обращать цвета изображения.
Учтите, вычитать значения типа byte нельзя, их нужно конвертировать к численному типу, а затем обратно. Для конвертации в число можно использовать функцию std::to_integer<int>. Для конвертации обратно в byte — конструктор.
Формат входных данных
Как и в прошлой задаче, программа принимает два аргумента командной строки: путь к входному и выходному PPM-файлам.
Формат выходных данных
Выходной файл имеет формат PPM.
Ограничения
Конвертируйте изображение по строкам. При конвертации по столбцам процессору придётся постоянно обновлять кеш-линии, и это замедлит работу. Программа, обрабатывающая изображение по столбцам, может провалить тест на больших изображениях.
Меняйте только main.cpp. Функции и классы namespace img_lib оставьте без изменений.
После повторного применения программы должно получиться исходное изображение.
Пример
Негатив пса вы найдёте в этом архиве. Позитив получите самостоятельно.
Что отправлять на проверку
Измените main.cpp, добавив в функцию main обращение изображения. Обращение реализуйте в функции NegateInplace, описанной выше. Эта функция должна также находиться в main.cpp.
Как будет тестироваться ваш код
Мы проверим, что:
изображения правильно обращаются,
функция NegateInplace работает правильно,
функция NegateInplace не меняет канал прозрачности,
изображение обращается по строкам, а не по столбцам.
