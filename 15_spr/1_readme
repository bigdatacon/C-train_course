Решение с двумя вершинами на каждую остановку удобно тем, что можно построить граф, нарисовав по ребру на каждый возможный элемент итогового маршрута: Wait — это ребро от начала ожидания на некоторой остановке до окончания ожидания на ней же, Bus — это ребро от окончания ожидания на некоторой остановке автобусного маршрута до начала ожидания на другой остановке этого же маршрута.
В решении с одной вершиной на каждую остановку мы не можем позволить себе проводить рёбра лишь между соседними остановками, потому что в каждое из рёбер
будет заложено время ожидания автобуса. Таким образом, рёбра должны проводиться для каждой пары остановок на каждом маршруте, аналогично решению с двумя вершинами на каждую остановку.
В решении с одной вершиной на остановку каждому ребру построенного маршрута соответствуют два элемента: Wait — ожидание нужного автобуса, Bus — проезд на этом автобусе между соответствующими остановками.
В любом варианте решения нужно проектировать структуры данных с учётом того, что автобус может проходить через одну остановку несколько раз: см. пример 3.

Задание
В одной из программ исследования генома человека используется такая структура данных для хранения и передачи информации о найденных в геноме нуклеотидах:
struct Nucleotide {
    char symbol;
    size_t position;
    int chromosome_num;
    int gene_num;
    bool is_marked;
    char service_info;
}; 
Где:
symbol — общеупотребимый буквенный код одного из четырёх нуклеотидов: A, T, G или С.
position — положение найденного нуклеотида в геноме. Может принимать значения от 0 до 3,3 млрд.
chromosome_num — номер хромосомы, в которой найден нуклеотид. Может принимать значения от 1 до 46.
gene_num — номер гена, в котором найден нуклеотид. Может принимать значения от 1 до 25 тыс., а также специальное значение 0, в случае если найденный нуклеотид лежит вне известных генов.
is_marked — флаг, содержащий информацию о том, был нуклеотид помечен ранее или нет.
service_info — служебная информация о результатах поиска. Может быть любым символом.
Программа работает правильно, однако результаты поиска занимают слишком много памяти.
Напишите структуру данных CompactNucleotide, которая позволяет хранить ту же информацию более компактно.
Чтобы обеспечить совместимость, напишите реализации функций Compress и Decompress. 
Ограничения
Размер вашей структуры CompactNucleotide не должен превышать 8 байтов.
В решении нельзя использовать директиву pragma pack.
Что отправлять на проверку
Реализацию структуры CompactNucleotide и функций Compress и Decompress.
Как будет тестироваться ваш код
Мы проверим, что данные достаточно компактны и верны при упаковке и распаковке.
