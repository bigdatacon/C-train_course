Подсказка:
На одном примере разберём, как гарантировать, что после StartDict вызывается Key или EndDict. Верните из метода StartDict объект вспомогательного класса DictItemContext со следующими свойствами:
хранит ссылку на Builder;
поддерживает только методы Key и EndDict, делегируемые в Builder.
Чтобы избежать дублирования кода с делегированием, удобно использовать наследование.
Задание 2
Это задание — часть итогового проекта одиннадцатого спринта. Вы будете сдавать его на проверку через репозиторий на GitHub. Не забудьте сохранить верное решение.
Улучшите класс json::Builder так, чтобы некоторые явные ошибки находились на этапе компиляции, а не выбрасывались в виде исключений при запуске программы. Ловить так все ошибки — сложная задача. Вы решите её в следующих спринтах, а пока начнёте с простого.
Код работы с обновлённым json::Builder не должен компилироваться в следующих ситуациях:
Непосредственно после Key вызван не Value, не StartDict и не StartArray.
После вызова Value, последовавшего за вызовом Key, вызван не Key и не EndDict.
За вызовом StartDict следует не Key и не EndDict.
За вызовом StartArray следует не Value, не StartDict, не StartArray и не EndArray.
После вызова StartArray и серии Value следует не Value, не StartDict, не StartArray и не EndArray.
Примеры кода, которые не должны компилироваться:
json::Builder{}.StartDict().Build();  // правило 3
json::Builder{}.StartDict().Key("1"s).Value(1).Value(1);  // правило 2
json::Builder{}.StartDict().Key("1"s).Key(""s);  // правило 1
json::Builder{}.StartArray().Key("1"s);  // правило 4
json::Builder{}.StartArray().EndDict();  // правило 4
json::Builder{}.StartArray().Value(1).Value(2).EndDict();  // правило 5 
Теперь методы не обязаны возвращать Builder&. Более того, эту задачу можно решить только возвратом специальных вспомогательных классов, допускающих определённые наборы методов.
Как и говорилось выше, при таком подходе останутся ошибки, которые продолжат выявляться лишь на этапе запуска:
Вызов некорректного метода сразу после создания json::Builder.
Вызов некорректного метода после End*.
Вы можете сразу решить более сложную задачу, но в этом нет необходимости. Оставьте выбрасывание исключений в своём коде как раз для непредвиденных ситуаций.
Ограничения
Единственное дополнительное ограничение относительно предыдущей задачи — ошибка компиляции в описанных выше ситуациях.
Что отправлять на проверку
Файлы json.h, json.cpp, json_builder.h и json_builder.cpp, содержащие библиотеку для работы с JSON, класс json::Builder и необходимые для его работы вспомогательные функции и классы.
Как будет тестироваться ваш код
Решение будет проверено двумя типами юнит-тестов:
Корректные цепочки методов, приводящие к ожидаемому результату.
Невалидные цепочки методов, которые должны порождать ошибку компиляции.
