Подсказка:
Класс Any имеет единственное поле — unique_ptr<AnyStorageBase>, где AnyStorageBase — вспомогательный класс.
Класс AnyStorageBase абстрактный. Он содержит виртуальный метод Print и виртуальный деструктор. Не имеет явных конструкторов и данных.
Вам понадобится шаблонный класс AnyStorage, производный от AnyStorageBase:
  template <typename T>
  class AnyStorage: public AnyStorageBase {
  public:
      // конструктор AnyStorage, принимающий T универсальным образом

      void Print(ostream& out) const override;

  private:
      T data_;
  };
   
В шаблонном конструкторе template <typename S> Any::Any<S> очистите S от ссылок и создайте объект AnyStorage:
  using Initial = std::remove_reference_t<S>;
  ptr_ = std::make_unique<AnyStorage<Initial>>(std::forward<S>(type));
   
   
  Задание
Реализуйте класс Any, который:
имеет шаблонный конструктор, принимающий владение значением любого типа,
имеет метод void Print(std::ostream& out) const, выводящий хранимое значение в поток out операцией <<.
Для решения задачи вам понадобятся вспомогательные классы. Попробуйте догадаться, какие именно. Если не получится — заглядывайте в подсказку.
Вам пригодится псевдоним типа std::remove_reference_t. Его можно применить, чтобы удалить из шаблонного типа все указания на ссылку:
#include <utility>
#include <string>

using namespace std;

// можно удалить обычную ссылку
static_assert(is_same_v<remove_reference_t<int&>, int>);

// можно удалить rvalue-ссылку
static_assert(is_same_v<remove_reference_t<char&&>, char>);

// если ссылки не было, то remove_reference_t ничего не меняет
static_assert(is_same_v<remove_reference_t<string>, string>); 
При использовании вспомогательных абстрактных классов не забудьте добавить в них виртуальный деструктор.
Ограничения
Шаблонный конструктор должен принимать значение наиболее универсальным способом — Forwarding reference.
Объект, переданный в конструктор Any, должен совершить только одно копирование или перемещение — в зависимости от того, передаётся в функцию временный объект или постоянный.
При удалении объекта Any должен удалиться и хранимый объект.
Класс Any — не шаблонный.
Пример
#include <iostream>
#include <string_view>
#include <string>

using namespace std;

class Dumper {
public:
    Dumper() {
        std::cout << "construct"sv << std::endl;
    }
    ~Dumper() {
        std::cout << "destruct"sv << std::endl;
    }
    Dumper(const Dumper&) {
        std::cout << "copy"sv << std::endl;
    }
    Dumper(Dumper&&) {
        std::cout << "move"sv << std::endl;
    }
    Dumper& operator = (const Dumper&) {
        std::cout << "= copy"sv << std::endl;
        return *this;
    }
    Dumper& operator = (Dumper&&) {
        std::cout << "= move"sv << std::endl;
        return *this;
    }
};

ostream& operator<< (ostream& out, const Any& arg) {
    arg.Print(out);
    return out;
}

ostream& operator<< (ostream& out, const Dumper&) {
    return out;
}

int main() {
    Any any_int(42);
    Any any_string("abc"s);
  
    // операция вывода Any в поток определена чуть выше в примере
    cout << any_int << endl << any_string << endl;

    Any any_dumper_temp{Dumper()};

    Dumper auto_dumper;
    Any any_dumper_auto(auto_dumper);
} 
Программа выводит такой текст:
42
abc
construct
move
destruct
construct
copy
destruct
destruct
destruct 
Что отправлять на проверку
Реализуйте в заготовке полностью класс Any и все вспомогательные классы.
Как будет тестироваться ваш код
Мы проверим, что:
класс Any правильно печатает объекты разных типов,
класс Any конструируется по универсальной ссылке на объект,
класс Any при конструировании не совершает лишних копий и перемещений,
класс Any не забывает удалить хранимый объект.
