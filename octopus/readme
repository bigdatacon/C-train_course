Задание 2
Для съёмок блокбастера «Атака октоклонов» нужно изготовить 1000 копий осьминогов на основе имеющегося осьминога-прототипа.
В классе Octopus не задан пользовательский конструктор копирования. Копирующий конструктор, сгенерированный компилятором, копирует осьминогов некорректно: несколько осьминогов используют щупальца прототипа. Это приводит к неопределённому поведению. 
Реализуйте следующий функционал:
Корректное клонирование осьминогов, при котором копия будет иметь свой набор щупалец, а не пользоваться щупальцами оригинала. Щупальца копии осьминога должны прицепляться к тем же щупальцам, что и оригинал.
Метод AddTentacle для добавления новых щупалец. Добавление должно сохранять адрес размещения существующих щупалец в памяти. id щупальца должен быть равен текущему количеству щупалец, увеличенному на 1.
Проверки, которые есть в функции main, упростят разработку.
Ограничения
Гарантируется, что количество щупалец, передаваемое в параметризованный конструктор класса Octopus, неотрицательное. Проверять их количество в конструкторе необязательно. Максимальное количество щупалец, которое будет иметь осьминог, не превысит несколько десятков.
Что отправлять на проверку
Решение должно включать исходный код класса Octopus и используемых им классов, а также нужные для компиляции директивы #include. Функция main не учитывается.
Как будет тестироваться ваш код
Класс Octopus будет протестирован кодом, подобным представленному в функции main из заготовки решения. Сохраните сигнатуры всех публичных методов классов Octopus и Tentacle неизменными, чтобы код скомпилировался без ошибок.

Подсказка:
Используйте классы ScopedPtr и PtrVector. С ними класс Octopus станет заметно проще.
Когда щупальца хранятся внутри PtrVector, создавать собственный конструктор копирования и деструктор для класса Octopus не придётся — конструктор копирования PtrVector корректно скопирует щупальца, а деструктор удалит их.
