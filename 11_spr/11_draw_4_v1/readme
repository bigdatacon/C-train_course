Подсказка:
Чтобы тип Color по умолчанию хранил значение monostate, разместите monostate первым в списке типов variant.
Используйте std::visit для вывода цвета в ostream любым из способов, показанных в теоретической части урока.

Это задание — часть итогового проекта десятого спринта. Не забудьте сохранить исходные файлы задания у себя на компьютере.
Текущая версия SVG-библиотеки для хранения цвета использует тип Color, объявленный как синоним типа string. Используя строку, легко задать статическое значение цвета. Однако это становится неудобным, если значение цвета требуется вычислять динамически:
// Выполняет линейную интерполяцию значения от from до to в зависимости от параметра t.
uint8_t Lerp(uint8_t from, uint8_t to, double t) {
    return static_cast<uint8_t>(std::round((to - from) * t + from));
}

int main() {
    using namespace svg;
    using namespace std;

    const uint8_t start_r = 0;
    const uint8_t end_r = 20;
    const uint8_t start_g = 255;
    const uint8_t end_g = 20;
    const uint8_t start_b = 30;
    const uint8_t end_b = 150;

    const int num_circles = 10;
    Document doc;
    for (int i = 0; i < num_circles; ++i) {
        const double t = double(i) / (num_circles - 1);

        const string r = to_string(Lerp(start_r, end_r, t));
        const string g = to_string(Lerp(start_g, end_g, t));
        const string b = to_string(Lerp(start_b, end_b, t));

        string fill_color = "rgb("s + r + ","s + g + ","s + b + ")"s;
        doc.Add(Circle()
                    .SetFillColor(fill_color)
                    .SetStrokeColor("black"s)
                    .SetCenter({i * 20.0 + 40, 40.0})
                    .SetRadius(15));
    }
    doc.Render(cout);
} 
image
Доработайте SVG-библиотеку — добавьте новые способы задавать цвет:
svg::Color color1;                               // none
svg::Color color2 = svg::Rgb{215, 30, 25};       // rgb(215,30,25)
svg::Color color3 = svg::NoneColor;              // none
svg::Color color4 = svg::Rgba{15, 15, 25, 0.7};  // rgba(15,15,25,0.7)
svg::Color color5 = "red"s;                      // red
svg::Color color6 = svg::Rgb{};                  // rgb(0,0,0)
svg::Color color7 = svg::Rgba{};                 // rgba(0,0,0,1.0); 
Для этого объявите в библиотеке тип svg::Color как std::variant, который объединяет типы std::monostate, std::string, svg::Rgb и svg::Rgba. Значение std::monostate обозначает отсутствующий цвет, который выводится в виде строки "none".
Требования к классам и структурам
**svg::Rgb**
Задаёт цвет в формате RGB, в виде трёх компонент red, green, blue типа uint8_t. Пример использования:
// Задаёт цвет в виде трех компонент в таком порядке: red, green, blue
svg::Rgb rgb{255, 0, 100};
assert(rgb.red == 255);
assert(rgb.green == 0);
assert(rgb.blue == 100);

// Задаёт цвет по умолчанию: red=0, green=0, blue=0
svg::Rgb color;
assert(color.red == 0 && color.green == 0 && color.blue == 0); 
**svg::Rgba**
Задаёт цвет в формате RGBA, в виде трёх компонент red, green, blue типа uint8_t и компоненты opacity типа double. Компонента opacity или альфа-канал задаёт степень непрозрачности цвета от 0.0 (абсолютно прозрачно) до 1.0 (абсолютно непрозрачный цвет). Пример использования:
// Задаёт цвет в виде четырёх компонент: red, green, blue, opacity
svg::Rgba rgba{100, 20, 50, 0.3};
assert(rgba.red == 100);
assert(rgba.green == 20);
assert(rgba.blue == 50);
assert(rgba.opacity == 0.3);

// Чёрный непрозрачный цвет: red=0, green=0, blue=0, alpha=1.0
svg::Rgba color;
assert(color.red == 0 && color.green == 0 && color.blue == 0 && color.opacity == 1.0); 
Теперь задавать цвет динамически станет удобнее:
// Выполняет линейную интерполяцию значения от from до to в зависимости от параметра t
uint8_t Lerp(uint8_t from, uint8_t to, double t) {
    return static_cast<uint8_t>(std::round((to - from) * t + from));
}

// Выполняет линейную интерполяцию Rgb цвета от from до to в зависимости от параметра t
svg::Rgb Lerp(svg::Rgb from, svg::Rgb to, double t) {
    return {Lerp(from.red, to.red, t), Lerp(from.green, to.green, t), Lerp(from.blue, to.blue, t)};
}

int main() {
    using namespace svg;
    using namespace std;

    Rgb start_color{0, 255, 30};
    Rgb end_color{20, 20, 150};

    const int num_circles = 10;
    Document doc;
    for (int i = 0; i < num_circles; ++i) {
        const double t = double(i) / (num_circles - 1);

        const Rgb fill_color = Lerp(start_color, end_color, t);

        doc.Add(Circle()
                    .SetFillColor(fill_color)
                    .SetStrokeColor("black"s)
                    .SetCenter({i * 20.0 + 40, 40.0})
                    .SetRadius(15));
    }
    doc.Render(cout);
} 
Описание формата выходных данных
Требования к методу svg::Document::Render такие же, как в задании предыдущего урока. Значения типа Color должны выводиться так:
#include <iostream>

#include "svg.h"

int main() {
    using namespace svg;
    using namespace std;

    Color none_color;
    cout << none_color << endl; // none
    
    Color purple{"purple"s};
    cout << purple << endl; // purple
    
    Color rgb = Rgb{100, 200, 255};
    cout << rgb << endl; // rgb(100,200,255)

    Color rgba = Rgba{100, 200, 255, 0.5};
    cout << rgba << endl; // rgba(100,200,255,0.5)

    Circle c;
    c.SetRadius(3.5).SetCenter({1.0, 2.0});
    c.SetFillColor(rgba);
    c.SetStrokeColor(purple);
    
    Document doc;
    doc.Add(std::move(c));
    doc.Render(cout);
} 
Ожидаемый вывод этой программы:
none
purple
rgb(100,200,255)
rgba(100,200,255,0.5)
<?xml version="1.0" encoding="UTF-8" ?>
<svg xmlns="http://www.w3.org/2000/svg" version="1.1">
  <circle cx="1" cy="2" r="3.5" fill="rgba(100,200,255,0.5)" stroke="purple"/>
</svg> 
Что отправлять на проверку
Код библиотеки должен располагаться в файлах svg.h и svg.cpp. Файл main.cpp должен содержать классы Triangle, Snowman и Star в пространстве имён shapes и необходимые для их работы функции. 
Как будет тестироваться ваш код
Тренажёр проверит классы svg::Rgb и svg::Rgba, методы задания цвета у объектов библиотеки svg и вывод объектов svg::Color.
Гарантируется, что при тестировании тренажёр будет передавать валидные параметры в методы классов и их конструкторы. Поэтому усложнять код проверками не нужно.
Функция main будет заменена на версию из тренажёра.
