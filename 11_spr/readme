Дана диаграмма классов, описывающая отношения между Строителем, Ресурсами, Домом и Спецификацией на постройку дома. Разработайте классы House, Resources, Builder и структурой Specification в соответствии с диаграммой.
image
Строитель, используя имеющиеся Ресурсы, может строить кирпичные Дома по переданной ему Спецификации. Для простоты считается, что дом не содержит ничего, кроме четырёх кирпичных стен.
На выкладку одного метра стены уходит четыре кирпича. Чтобы выложить стену высотой один метр, требуется восемь рядов кирпичей.
Если на постройку дома хватает кирпичей, строитель уменьшает их количество в ресурсах, используя метод Resources::TakeBricks. При попытке взять отрицательное количество кирпичей либо взять больше кирпичей, чем есть, метод Resources::TakeBricks должен выбросить исключение std::out_of_range. При нехватке кирпичей на постройку дома Строитель должен выбросить исключение std::runtime_error.
В следующем примере два строителя, в распоряжении которых 10000 кирпичей, строят два дома и одну баню:
int main() {
    Resources resources{10000};
    Builder builder1{resources};
    Builder builder2{resources};

    House house1 = builder1.BuildHouse(HouseSpecification{12, 9, 3});
    assert(house1.GetLength() == 12);
    assert(house1.GetWidth() == 9);
    assert(house1.GetHeight() == 3);
    cout << resources.GetBrickCount() << " bricks left"s << endl;

    House house2 = builder2.BuildHouse(HouseSpecification{8, 6, 3});
    assert(house2.GetLength() == 8);
    cout << resources.GetBrickCount() << " bricks left"s << endl;

    House banya = builder1.BuildHouse(HouseSpecification{4, 3, 2});
    assert(banya.GetHeight() == 2);
    cout << resources.GetBrickCount() << " bricks left"s << endl;
} 
Программа выведет:
5968 bricks left
3280 bricks left
2384 bricks left 
Ограничения
Гарантируется, что спецификация будет содержать положительные размеры дома по всем трём измерениям, а коллекция ресурсов изначально будет содержать неотрицательное количество кирпичей.
Что отправлять на проверку
Пришлите один .cpp файл, содержащий код классов House, Resources, Buider и структуры HouseSpecification. Функция main при её наличии будет заменена на версию из тренажёра.
Как будет тестироваться ваш код
Классы будут проверены на наличие указанных в диаграмме классов публичных методов. Работа публичных методов будет проверена тренажёром на соответствие требований задания, как указано в примере кода.
