Подсказка : 
Прочитать XML можно функцией Load. Она возвратит объект типа Document, содержащий все необходимые данные.
XML состоит из элементов или тегов, главный из которых — корневой. Получить его можно методом документа GetRoot().
Вам нужны вложенные теги корневого элемента. Доступ к ним можно получить методом Children().
Нужные значения получи́те, применив шаблонный метод AttributeValue тега, который принимает один аргумент — название атрибута.
Используйте AttributeValue<int> для получения числовых атрибутов и AttributeValue<string> для строковых.
  


Задание
Задание 2
Вы реализовали удобный способ задавать данные для калькулятора трат. Но современные программы умеют открывать самые разные файлы — вряд ли ваш любимый графический редактор поддерживает только один формат изображений.
Расширьте калькулятор трат, добавив другой формат — XML.
Разработайте функцию:
vector<Spending> LoadFromXml(istream& input) 
Она должна прочитать XML из входного потока и возвратить вектор трат.
Как и в прошлой задаче, на вход будут подаваться данные строго определённого вида. Пример указан ниже. Проверять корректность входа не нужно.
В рамках этой задачи вам нужно самостоятельно изучить интерфейс приведённой библиотеки и понять, как её можно использовать для чтения данных задачи. В подсказках — советы по использованию этой библиотеки.
Библиотека XML создана специально для этого задания, это не полноценная библиотека для чтения этого формата.
Пример
Пусть во входной поток передан следующий XML:
<july>
  <spend amount="2500" category="food"></spend>
  <spend amount="1150" category="transport"></spend>
  <spend amount="5780" category="restaurants"></spend>
  <spend amount="7500" category="clothes"></spend>
  <spend amount="23740" category="travel"></spend>
  <spend amount="12000" category="sport"></spend>
</july> 
Программа прочтёт этот XML, используя вашу функцию, и выведет следующий текст:
Total 52670
Most expensive is travel 
Название корневого элемента можно проигнорировать.
Ограничения
Можно менять только функцию LoadFromXml, при необходимости добавлять свои функции в файл main.cpp.
Не меняйте структуру Spendings, функцию main, файлы xml.h и xml.cpp.
Как будет тестироваться ваш код
Проверим, что:
Вы не поменяли ничего лишнего;
Вы правильно читаете XML и делаете это, используя нашу библиотеку.
Гарантируется, что:
XML, подаваемый на вход, будет иметь строго определённый формат: в корневой тег, имеющий произвольное имя, вложены только теги spend.
Количество тегов spend — не менее одного.
Эти теги имеют атрибуты amount и category, данные из которых вам нужно использовать.
