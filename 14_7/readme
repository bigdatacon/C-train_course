Изменения в копирующем конструкторе класса Vector идентичны изменениям в конструкторе, который создаёт Vector заданного размера.
Метод RawMemory::Swap поможет эффективно реализовать операцию Reserve класса Vector.


Упростите конструкторы, деструктор и метод Reserve класса Vector, применив класс RawMemory. Функционал класса Vector должен остаться без изменений.
Исходный код класса RawMemory:
template <typename T>
class RawMemory {
public:
    RawMemory() = default;

    explicit RawMemory(size_t capacity)
        : buffer_(Allocate(capacity))
        , capacity_(capacity) {
    }

    ~RawMemory() {
        Deallocate(buffer_);
    }

    T* operator+(size_t offset) noexcept {
        // Разрешается получать адрес ячейки памяти, следующей за последним элементом массива
        assert(offset <= capacity_);
        return buffer_ + offset;
    }

    const T* operator+(size_t offset) const noexcept {
        return const_cast<RawMemory&>(*this) + offset;
    }

    const T& operator[](size_t index) const noexcept {
        return const_cast<RawMemory&>(*this)[index];
    }

    T& operator[](size_t index) noexcept {
        assert(index < capacity_);
        return buffer_[index];
    }

    void Swap(RawMemory& other) noexcept {
        std::swap(buffer_, other.buffer_);
        std::swap(capacity_, other.capacity_);
    }

    const T* GetAddress() const noexcept {
        return buffer_;
    }

    T* GetAddress() noexcept {
        return buffer_;
    }

    size_t Capacity() const {
        return capacity_;
    }

private:
    // Выделяет сырую память под n элементов и возвращает указатель на неё
    static T* Allocate(size_t n) {
        return n != 0 ? static_cast<T*>(operator new(n * sizeof(T))) : nullptr;
    }

    // Освобождает сырую память, выделенную ранее по адресу buf при помощи Allocate
    static void Deallocate(T* buf) noexcept {
        operator delete(buf);
    }

    T* buffer_ = nullptr;
    size_t capacity_ = 0;
}; 
Что отправлять на проверку
Исходный код классов Vector и RawMemory должен быть в файле vector.h.
Как будет тестироваться ваш код
Работа методов класса Vector будет проверена тем же набором тестов, что в задании прошлого урока. Ваше решение из прошлого урока, не использующее класс RawMemory,  сможет пройти эти тесты. Но класс Vector лучше переработать. Так вы избежите трудностей в следующих заданиях.
Не изменяйте сигнатуру публичных методов класса Vector. Иначе решение может быть не принято.
Код скомпилируется со включёнными UB и Address санитайзерами, чтобы выявить потенциальные проблемы при работе с указателями и динамической памятью.
Функция main будет заменена кодом из тренажёра.
