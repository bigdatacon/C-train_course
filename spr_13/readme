Подсказка:
Сделайте так, чтобы функция Merge принимала две пары итераторов.
Она будет иметь два типовых шаблонных параметра — InputIt1 и InputIt2.
Если вам мешают предупреждения из-за сравнения разных видов чисел, используйте std::less, как это сказано в условии.
   
   Задание
  В заготовке — знакомая вам ещё из темы о рекурсивных алгоритмах функция слияния. Но реализована она не универсально, такой функцией можно сливать только векторы. Измените функцию Merge и реализуйте её так, чтобы она могла принять элементы любого контейнера. Её сигнатуру можно и нужно поменять. Каким образом — решите сами на основе материалов этого урока. Вызывать функцию Merge будет только ваш код, её сигнатура проверяться не будет.
Также реализуйте функции MergeSomething, которые должны вызывать Merge. Можете написать вместо них одну шаблонную, принимающую два произвольных контейнера.
Напоследок реализуйте функцию MergeHalves — она должна слить две половины вектора. Детали вы найдёте в заготовке.
Чтобы избежать предупреждений из-за сравнения чисел разных типов, используйте  конструкцию less<>()(elem1, elem2) вместо elem1 < elem2.
Ограничения
Нельзя лишний раз копировать или перемещать переданные функции MergeSomething и MergeHalves контейнеры и их элементы.
Не реализуйте логику слияния в функциях MergeSomething и MergeHalves, она должна остаться в Merge.
Пример
Пример есть в заготовке кода. После решения задачи его вывод должен быть таким:
Merging vectors:
60
65
70
75
80
85
90
95
Merging vector and list:
0.1
60
70
72.5
80
82.11
90
1e+30
Merging string and list:
0.1
A
C
72.5
N
82.11
Z
1e+30
Merging set and vector:
20
65
75
77
81
85
95
Merging vector halves:
60
65
70
75
80
85
90
95 
Что отправлять на проверку
Измените в заготовке функцию Merge, реализуйте MergeSomething и MergeHalves.
Как будет тестироваться ваш код
Мы проверим, что:
MergeSomething правильно сливает различные контейнеры,
MergeHalves правильно сливает половины вектора,
контейнеры не копируются и не перемещаются,
элементы не копируются и не перемещаются лишний раз.
