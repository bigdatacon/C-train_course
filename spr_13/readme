Подсказка:
Для правильной обработки налогов вам придётся отдельно считать заработанное и потраченное.
В качестве первого шаблонного параметра SummingSegmentTree вместо double удобно использовать свою структуру с двумя полями. Для неё реализуйте необходимые арифметические операции.
В файле parser.cpp добавьте поддержку нового запроса, а также расширенный синтаксис PayTax.

   Задание
Задание
Личный бюджет. Часть третья
Вам дано эффективное решение первой части задачи о личном бюджете. Для хранения операций оно использует древовидную структуру данных, позволяющую избежать модификации каждого дня для длинных интервалов.
Ваша задача — сделать с этим решением то, что вы сделали со своим решением в предыдущей части этого задания. Добавьте поддержку нового запроса:
Трата средств. Разбивает указанную сумму на все дни. Теперь чистая прибыль вычисляется как разница заработанного и потраченного. Траты не влияют на налогообложение. Таким образом, чистая прибыль за день может стать отрицательной.
Кроме того, добавьте в запрос PayTax возможность указывать процентную ставку налога.
Формат входных данных
Программа должна обрабатывать такие запросы:
Spend <дата начала> <дата конца> <прибыль> — учесть, что в этот период равномерно по дням была потрачена указанная сумма.
PayTax <дата начала> <дата конца> <ставка> — заплатить налог в каждый день указанного диапазона. Ставка — целое число от 0 до 100.
Остальные запросы остаются без изменений. Учтите, что траты не влияют на сумму налога.
Формат выходных данных
Формат выходных данных остаётся без изменений.
Ограничения
Программа теперь должна быть более эффективной, количество возможных запросов увеличивается до 10000. 
Пример
Ввод
8
Earn 2000-01-02 2000-01-06 20
ComputeIncome 2000-01-01 2001-01-01
PayTax 2000-01-02 2000-01-03 13
ComputeIncome 2000-01-01 2001-01-01
Spend 2000-12-30 2001-01-02 14
ComputeIncome 2000-01-01 2001-01-01
PayTax 2000-12-30 2000-12-30 13
ComputeIncome 2000-01-01 2001-01-01 
Вывод
20
18.96
8.46
8.46 
Что отправлять на проверку
Измените данную в заготовке кода реализацию базового функционала, добавив требующиеся возможности. А потом отправьте на проверку.
Как будет тестироваться ваш код
Выполнятся те же тесты, что и в предыдущем случае, но дополнительно будет проверена эффективность для большого количества запросов.
