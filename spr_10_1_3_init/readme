Подсказка
В классе транспортного справочника понадобятся индексы для поиска автобусов и остановок по имени. Рекомендуется в качестве значений использовать константные указатели: const Bus* и const Stop*, где Bus и Stop — название структур для маршрута и остановки соответственно.
Предпочитайте unordered_set и unordered_map упорядоченным контейнерам, чтобы достичь требуемой вычислительной сложности операций вставки и поиска.
Сами остановки и автобусы удобно хранить в deque, чтобы ссылки и указатели на них не инвалидировались при добавлении.
Читайте cin построчно методом std::getline.
Обратите внимание, что в маршруте может фигурировать остановка, объявленная после этого маршрута. Рекомендуется сохранить запросы, и вначале обработать все запросы остановок, а затем, все запросы маршрутов.

Задание 1
Транспортный справочник. Часть A
В этом задании нужно реализовать систему хранения транспортных маршрутов и обработки запросов к ней. Сначала на вход подаются запросы на создание базы данных, затем — запросы к самой базе.
При проектировании решения учитывайте, что его предстоит неоднократно расширять. Авторские решения вы увидите после успешной сдачи всех версий. Таким образом, внося все доработки в функционал, вы будете иметь дело с собственной архитектурой кода и почувствуете, какие именно проектировочные решения мешают расширению.
Разбейте задачу на файлы. Реализуйте чтение в отдельном модуле, который будет отвечать за ввод и вывод данных. Сам транспортный справочник реализуйте в отдельном классе, который не работает со вводом и выводом. Также создайте структуры для хранения информации об остановке и об автобусном маршруте.
Формат ввода базы данных
В первой строке стандартного потока ввода содержится число N — количество запросов на обновление базы данных, затем — по одному на строке — вводятся сами запросы. Запросы бывают двух типов.
Stop X: latitude, longitude
Добавляет информацию об остановке с названием X и координатами latitude (широта) и longitude (долгота) на земной поверхности. Название остановки может состоять из нескольких слов. Используйте двоеточие как признак окончания названия остановки. Широта задаётся в градусах от -90.0 (южный полюс) до +90.0 (северный полюс). Положительные широты расположены севернее экватора, отрицательные — южнее. Долгота задаётся в градусах от -180.0 до +180.0, положительные значения соответствуют восточной долготе, а отрицательные — западной. Нулевой меридиан проходит через Гринвичскую королевскую обсерваторию в Лондоне, а координаты останкинской телевышки равны 55.8199081 северной широты и 37.6116028 восточной долготы. Широта и долгота разделяются запятой, за которой следует пробел.
Гарантируется, что остановка X определена не более чем в одном запросе Stop.
Bus X: описание маршрута
Запрос на добавление автобусного маршрута X. Название маршрута может состоять из нескольких слов и отделяется от описания символом двоеточия. Описание маршрута может задаваться в одном из двух форматов (см. пример):
stop1 - stop2 - ... stopN: автобус следует от stop1 до stopN и обратно с указанными промежуточными остановками.
image

Маршрут, заданный остановками A, B, C, D. Автобус проходит через остановки: A, B, C, D, C, B, A
stop1 > stop2 > ... > stopN > stop1: кольцевой маршрут с конечной stop1.
image

Кольцевой маршрут, заданный остановками A, B, C, D, A
По сути первая версия описания маршрута эквивалентна stop1 > stop2 > ... > stopN-1 > stopN > stopN-1 > ... > stop2 > stop1.
На рисунке показаны шесть остановок: A, B, C, D, E, F и два автобусных маршрута: кольцевой A-C-D-B-A и обычный E>B>D>F.
image

Маршруты A>C>D>B>A и E-B-D-F
Гарантируется, что каждая из остановок маршрута определена в некотором запросе Stop, а сам маршрут X определён не более чем в одном запросе Bus.
Формат запросов к базе данных
Запросы к базе данных подаются в cin после запросов на создание базы. В первой строке вводится количество запросов, затем — по одному в строке — вводятся сами запросы. Запросы в этой задаче бывают только одного типа.
Bus X
Вывести информацию об автобусном маршруте X в следующем формате:
Bus X: R stops on route, U unique stops, L route length
Здесь
X — название маршрута. Оно совпадает с названием, переданным в запрос Bus.
R — количество остановок в маршруте автобуса от stop1 до stop1 включительно.
U — количество уникальных остановок, на которых останавливается автобус. Одинаковыми считаются остановки, имеющие одинаковые названия.
L — длина маршрута в метрах. В этом задании для простоты считается, что автобус проезжает путь между двумя соседними остановками по кратчайшему расстоянию по земной поверхности. Для вычисления расстояния между двумя точками пользуйтесь функцией ComputeDistance из заготовки кода.
Величину расстояния, а также другие вещественные числа в последующих частях задачи, выводите с шестью значащими цифрами, то есть предваряя манипулятором setprecision(6).
Если маршрут X не найден, выведите Bus X: not found.
Ограничения
Код должен быть аккуратным, эффективным, структурированным и выполнять свою задачу.
После следующей темы код транспортного справочника будет проходить ревью.
Разместите код программы в следующих исходных файлах:
transport_catalogue.h, transport_catalogue.cpp — класс транспортного справочника;
geo.h — функции для работы с географическими координатами;
input_reader.h, input_reader.cpp — чтение запросов на заполнение базы;
stat_reader.h, stat_reader.cpp — чтение запросов на вывод и сам вывод;
main.cpp — точка входа.
Класс транспортного справочника назовите TransportCatalogue. Он должен иметь методы для выполнения следующих задач:
добавление маршрута в базу,
добавление остановки в базу,
поиск маршрута по имени,
поиск остановки по имени,
получение информации о маршруте.
Методы классаTransportCatalogue не должны выполнять никакого ввода-вывода. В будущих версиях программы формат входных и выходных данных программы будет изменён. Отделение логики от ввода-вывода позволит легко изменить формат выходных и выходных данных, не затрагивая логику приложения.
Эффективность
При разработке следует уделять внимание эффективности кода. Придерживайтесь ограничений, перечисленных ниже.
Сложность методов и функций должна быть оптимальной:
чтение запроса производится за время O(N)O(N), где NN — количество символов в нём,
добавление остановки и маршрута производится со сложностью амортизированная O(K)O(K) в среднем, где KK — длина названия,
нахождение остановки или маршрута по их названию в среднем — амортизированная O(K)O(K), где KK — длина названия,
получение информации о маршруте производится со сложностью амортизированная O(1)O(1) в среднем.
Используйте, где возможно, перемещение строк и других больших объектов вместо копирования.
Не храните несколько копий одних и тех же данных. Например, информация об остановке не должна дублироваться в маршрутах, которые проходят через эту остановку. Придумайте, как в качестве ключей ассоциативных контейнеров вместо string использовать string_view, ссылающихся на название маршрута или остановки.
Как будет тестироваться ваша программа
Допустимые символы в названиях маршрутов и остановок — латинские буквы, цифры и пробелы. Все названия непусты, не могут начинаться на пробелы или заканчиваться ими.
Гарантируется, что тренажёр будет подавать только корректные входные данные, которые соответствуют описанному формату.
Пример
Ввод
10
Stop Tolstopaltsevo: 55.611087, 37.208290
Stop Marushkino: 55.595884, 37.209755
Bus 256: Biryulyovo Zapadnoye > Biryusinka > Universam > Biryulyovo Tovarnaya > Biryulyovo Passazhirskaya > Biryulyovo Zapadnoye
Bus 750: Tolstopaltsevo - Marushkino - Rasskazovka
Stop Rasskazovka: 55.632761, 37.333324
Stop Biryulyovo Zapadnoye: 55.574371, 37.651700
Stop Biryusinka: 55.581065, 37.648390
Stop Universam: 55.587655, 37.645687
Stop Biryulyovo Tovarnaya: 55.592028, 37.653656
Stop Biryulyovo Passazhirskaya: 55.580999, 37.659164
3
Bus 256
Bus 750
Bus 751
 
Вывод
Bus 256: 6 stops on route, 5 unique stops, 4371.02 route length
Bus 750: 5 stops on route, 3 unique stops, 20939.5 route length
Bus 751: not found
 
Дополнительные примеры можно найти в архиве:
