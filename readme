Подсказка : 
Прочитать JSON можно функцией Load. Она возвратит объект типа Document, содержащий все необходимые данные.
JSON состоит из узлов, главный из которых — корневой. Получить его можно методом документа GetRoot().
Корневой узел JSON из этой задачи — всегда массив. Получить доступ к его элементам можно методом AsArray().
Элементы корневого узла — словари. Можно получить ассоциативный контейнер, лежащий в их основе методом AsMap().
Получив из словаря нужный узел, конвертируйте его в число методом AsInt() либо в string методом AsString().
  


Задание
Задание 1
Перед вами программа для подсчёта трат:
#include <algorithm>
#include <cassert>
#include <fstream>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;

// структура хранит информацию о трате:
// категорию товара или услуги и стоимость
struct Spending {
    string category;
    int amount;
};

int CalculateTotalSpendings(const vector<Spending>& spendings) {
    return accumulate(
        spendings.begin(), spendings.end(), 0, [](int current, const Spending& spending){
            return current + spending.amount;
        });
}

string FindMostExpensiveCategory(const vector<Spending>& spendings) {
    assert(!spendings.empty());
    auto compare_by_amount = [](const Spending& lhs, const Spending& rhs) {
        return lhs.amount < rhs.amount;
    };
    return max_element(begin(spendings), end(spendings), compare_by_amount)->category;
}

int main() {
    const vector<Spending> spendings = {{"food"s, 2500},    {"transport"s, 1150}, {"restaurants"s, 5780},
                                        {"clothes"s, 7500}, {"travel"s, 23740},   {"sport"s, 12000}};
    cout << "Total "s << CalculateTotalSpendings(spendings) << '\n';
    cout << "Most expensive is "s << FindMostExpensiveCategory(spendings) << '\n';
} 
Две функции этой программы вычисляют сумму всех трат и наиболее дорогую категорию.
В main показан пример загрузки данных. Но так использовать программу неудобно. Поэтому примените предлагаемую библиотеку для чтения JSON.
Ваша задача разработать функцию:
vector<Spending> LoadFromJson(istream& input) 
Она должна прочитать JSON из входного потока и возвратить вектор трат.
Нужно обрабатывать только JSON строго определённого вида, подобный тому, который указан в примере. Проверять корректность входа не нужно, считайте, что на вход подаётся только JSON, поддерживаемый предоставленной библиотекой.
В рамках этой задачи вам нужно изучить интерфейс приведённой библиотеки и понять, как её применить для чтения данных задачи. В подсказках — советы по использованию этой библиотеки.
Учтите, библиотека JSON создана специально для задания, это не полноценная библиотека для чтения этого формата.
Пример
Пусть в поток передан следующий JSON:
[
  {"amount": 2500, "category": "food"},
  {"amount": 1150, "category": "transport"},
  {"amount": 5780, "category": "restaurants"},
  {"amount": 7500, "category": "clothes"},
  {"amount": 23740, "category": "travel"},
  {"amount": 12000, "category": "sport"}
] 
Если вы не поменяли main, программа должна прочитать JSON, используя вашу функцию, и вывести следующий текст:
Total 52670
Most expensive is travel 
Ограничения
Можно менять только функцию LoadFromJson и при необходимости добавлять свои функции в файл main.cpp.
Не меняйте структуру Spendings, функцию main, файлы json.h и json.cpp.
Как будет тестироваться ваш код
Проверим, что:
Вы не поменяли ничего лишнего;
Вы правильно читаете JSON и делаете это, используя нашу библиотеку.
Гарантируется, что:
JSON, подаваемый на вход, будет иметь строго определённый формат: непустой массив словарей, содержащих ключи amount и category. Не переусложняйте свой код избыточными проверками.
Значение amount целочисленное. Значение category всегда строковое.
