Условие задачи
Задание
Замените способ настройки стоп-слов в классе SearchServer. Вместо метода SetStopWords разработайте параметризованные конструкторы, принимающие стоп-слова в следующих форматах:
в виде строки, где стоп-слова разделены пробелами. В начале, в конце строки и между стоп-словами может быть произвольное количество пробелов.
в виде произвольной коллекции строк, такой как vector или set. Пустые строки и слова-дубликаты внутри коллекции должны игнорироваться. Чтобы не дублировать код, примените шаблоны.
Пример инициализации класса SearchServer:
// инициализируем поисковую систему, передавая стоп-слова в контейнере vector
const vector<string> stop_words_vector = {"и"s, "в"s, "на"s, ""s, "в"s};
SearchServer search_server1(stop_words_vector);
// инициализируем поисковую систему передавая стоп-слова в контейнере set
const set<string> stop_words_set = {"и"s, "в"s, "на"s};
SearchServer search_server2(stop_words_set);
// инициализируем поисковую систему строкой со стоп-словами, разделёнными пробелами
SearchServer search_server3("  и  в на   "s); 
В структуре Document реализуйте:
конструктор по умолчанию, который инициализирует поля структуры нулевыми значениями;
параметризованный конструктор, позволяющий задать значения id документа, релевантности и рейтинга.

Подсказка: 
Конструктор, как и обычная функция, бывает шаблонным. Шаблонный конструктор может принимать коллекцию стоп-слов, находящихся в разных коллекциях — в вашем случае, в vector и set:
class SearchServer {
public:
    template <typename StringCollection>
    explicit SearchServer(const StringCollection& stop_words) {
        ...
    }
    ...
};  
Доработайте функцию SplitIntoWords: исключите из неё возврат пустых слов. Реализуйте параметризованный конструктор, который принимает строку со стоп-словами.
