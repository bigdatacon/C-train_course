Условие задачи
Задание
Это задание — итоговый проект третьего спринта. Вы будете сдавать его на проверку через репозиторий на GitHub. А пока сохраните решение в своей IDE.
Примените макросы ASSERT, ASSERT_HINT, ASSERT_EQUAL и ASSERT_EQUAL_HINT для проверки работы основных функций поисковой системы, таких как:
Добавление документов. Добавленный документ должен находиться по поисковому запросу, который содержит слова из документа.
Поддержка стоп-слов. Стоп-слова исключаются из текста документов.
Поддержка минус-слов. Документы, содержащие минус-слова из поискового запроса, не должны включаться в результаты поиска.
Соответствие документов поисковому запросу. При этом должны быть возвращены все слова из поискового запроса, присутствующие в документе. Если есть соответствие хотя бы по одному минус-слову, должен возвращаться пустой список слов.
Сортировка найденных документов по релевантности. Возвращаемые при поиске документов результаты должны быть отсортированы в порядке убывания релевантности.
Вычисление рейтинга документов. Рейтинг добавленного документа равен среднему арифметическому оценок документа.
Фильтрация результатов поиска с использованием предиката, задаваемого пользователем.
Поиск документов, имеющих заданный статус.
Корректное вычисление релевантности найденных документов.
Как будет происходить проверка этого задания
Разработанные вами тесты должны иметь точку входа, заданную функцией TestSearchServer. Код поисковой системы должен успешно проходить ваши тесты. Тренажёр проверит работу тестов на нескольких реализациях класса SearchServer. Одна из реализаций будет корректной, в других будут ошибки в логике работы класса. Задача считается решённой при выполнении следующих условий:
Корректная реализация класса SearchServer успешно проходит тесты, которые вы разработали;
Ваши тесты выявляют не менее 50% некорректных реализаций класса SearchServer;
Ваши тесты используют макросы фреймворка вместо стандартного макроса assert.
Тренажёр ожидает, что ваша реализация класса SearchServer будет содержать следующие публичные методы.
struct Document {
    int id;
    double relevance;
    int rating;
};
enum class DocumentStatus {
    ACTUAL,
    IRRELEVANT,
    BANNED,
    REMOVED,
};
class SearchServer {
public:
    void SetStopWords(const string& text) {
        // Ваша реализация данного метода
    }
    void AddDocument(int document_id, const string& document, DocumentStatus status, const vector<int>& ratings) {
        // Ваша реализация данного метода
    }
    template <typename DocumentPredicate>
    vector<Document> FindTopDocuments(const string& raw_query, DocumentPredicate document_predicate) const {
        // Ваша реализация данного метода
    }
    vector<Document> FindTopDocuments(const string& raw_query, DocumentStatus status) const {
        // Ваша реализация данного метода
    }
    vector<Document> FindTopDocuments(const string& raw_query) const {
        // Ваша реализация данного метода
    }
    int GetDocumentCount() const {
        // Ваша реализация данного метода
    }
    tuple<vector<string>, DocumentStatus> MatchDocument(const string& raw_query, int document_id) const {
        // Ваша реализация данного метода
    }
private:
    // Реализация приватных методов вашей поисковой системы
};  
Перед вами исходный код с примером теста, проверяющего, что стоп-слова при добавлении документа исключаются поисковой системой. На проверку отправьте только сами тесты, которые надо поместить между комментариями:
// -------- Начало модульных тестов поисковой системы ---------- и
 // --------- Окончание модульных тестов поисковой системы -----------. 
Не отправляйте объявления макроса ASSERT и других макросов, иначе ваши тесты не пройдут проверку.



Подсказка: 
Используйте свои готовые юнит-тесты поисковой системы. Макрос assert в них замените на подходящие по смыслу макросы ASSERT
и ASSERT_EQUAL. ASSERT_EQUAL выдаёт больше полезной информации, когда нарушается условие равенства проверяемых значений.
