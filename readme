Задание 1
Расширим функционал вашей поисковой системы: добавим перечислимые типы и статусы документов. Каждый документ при добавлении будет помечаться как актуальный (ACTUAL), устаревший (IRRELEVANT), отклонённый (BANNED) или удалённый (REMOVED).
Начиная с этой задачи вам больше не придётся отправлять на проверку функцию main, реализовывать ввод и вывод данных. Важно, чтобы класс SearchServer и вспомогательные структуры и функции удовлетворяли всем условиям.
Объявите перечислимый тип DocumentStatus со значениями ACTUAL, IRRELEVANT, BANNED, REMOVED.
Добавьте статус документа третьим параметром метода AddDocument. Итого параметры будут следующими: int document_id, const string& document, DocumentStatus status, const vector<int>& ratings. Этот статус сохраните для документа по его document_id.
Добавьте статус вторым параметром метода FindTopDocuments. Параметры теперь будут такими: const string& raw_query, DocumentStatus status. Метод должен возвращать пять лучших документов, отсортированных по релевантности, и выбирать только среди документов с указанным статусом. Фильтрация по статусу пусть происходит до отсечения лучших документов. Возвращать статусы найденных документов не нужно.
Пример
void PrintDocument(const Document& document) {
    cout << "{ "s
         << "document_id = "s << document.id << ", "s
         << "relevance = "s << document.relevance << ", "s
         << "rating = "s << document.rating
         << " }"s << endl;
}
int main() {
    SearchServer search_server;
    search_server.SetStopWords("и в на"s);
    search_server.AddDocument(0, "белый кот и модный ошейник"s,        DocumentStatus::ACTUAL, {8, -3});
    search_server.AddDocument(1, "пушистый кот пушистый хвост"s,       DocumentStatus::ACTUAL, {7, 2, 7});
    search_server.AddDocument(2, "ухоженный пёс выразительные глаза"s, DocumentStatus::ACTUAL, {5, -12, 2, 1});
    search_server.AddDocument(3, "ухоженный скворец евгений"s,         DocumentStatus::BANNED, {9});
    cout << "ACTUAL:"s << endl;
    for (const Document& document : search_server.FindTopDocuments("пушистый ухоженный кот"s, DocumentStatus::ACTUAL)) {
        PrintDocument(document);
    }
    cout << "BANNED:"s << endl;
    for (const Document& document : search_server.FindTopDocuments("пушистый ухоженный кот"s, DocumentStatus::BANNED)) {
        PrintDocument(document);
    }
    return 0;
} 
Вывод
ACTUAL:
{ document_id = 1, relevance = 0.866434, rating = 5 }
{ document_id = 0, relevance = 0.173287, rating = 2 }
{ document_id = 2, relevance = 0.173287, rating = -1 }
BANNED:
{ document_id = 3, relevance = 0.231049, rating = 9 } 
