Подсказка : 
Разные строки текста или наборы этих строк можно обрабатывать параллельно, а затем складывать полученные словари.
Если собираетесь добавлять future в вектор, имейте в виду: это некопируемый тип.


Задание
Задание
Крупная IT-компания Янгл проводит исследование упоминаемости своего бренда в блогах и социальных сетях. Аналитики компании уже выгрузили интересующие их публикации и сформировали набор ключевых слов. Аналитики хотят знать, сколько раз каждое ключевое слово входит в набор публикаций.
Помогите им это сделать: напишите функцию Stats ExploreKeyWords(const KeyWords& key_words, istream& input). Её параметры:
key_words — множество ключевых слов,
input — входной поток, содержащий исследуемые публикации в блогах и соц. сетях, одна строка — одна публикация.
KeyWords — синоним для set<string, less<>>.
Функция ExploreKeyWords должна возвращать структуру Stats, в которой хранится, сколько раз каждое слово из key_words суммарно встретилось в потоке input:
struct Stats {
    map<string, int> word_frequences;
    Stats& operator+=(const Stats& other);
}; 
При подсчёте вхождения ключевых слов в текст нужно учитывать только вхождения в виде отдельных слов. Слова друг от друга отделяются одним или несколькими пробелами.
Чтобы уложиться в ограничение по времени, эту задачу вам предстоит распараллелить.
Пример
Допустим, что key_words = {"yangle", "rocks", "sucks", "all"} и у вас есть публикация из социальной сети Switter: “Goondex really sucks, but yangle rocks ! Use yangle”. Слово “yangle” входит в неё два раза, “rocks” — один раз, а слова “all” и “sucks” — ни разу. Слово “sucks” не входит ни разу, потому что в данном примере оно — префикс слова “sucks,”, ведь по условию слова друг от друга отделяются только пробелами. Несмотря на то, что слово “all” — часть слова “really”, его вхождение тоже нельзя засчитывать, так как это не отдельное слово.
Полный пример — в заготовке кода.
Ограничения
Слова состоят только из букв, цифр и знаков пунктуации (тех, для которых isprint(c) == true).
Ваш код должен содержать слово async.
Что отправлять на проверку
cpp-файл, содержащий функцию ExploreKeyWords, определение структуры Stats, а также нужные для их работы подключения библиотек и другие функции. Функция main будет проигнорирована при тестировании.
Как будет тестироваться ваш код
Правильность работы функции будет проверена юнит-тестами. Также будет измерено время её работы.
Входные данные для теста производительности:
длина слов не больше шести элементов;
количество ключевых слов не больше 50 000;
количество слов в строке не больше 20;
количество строк не больше 50 000.
Время работы вашей функции должно быть по крайней мере на 30% меньше, чем у авторского однопоточного решения.
Мы не предоставляем вам бенчмарк, но гарантируем, что ограничения соответствуют указанным.
