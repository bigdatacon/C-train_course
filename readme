Задание:
Задание 2
Разработайте класс Translator, позволяющий сохранять двуязычные пары слов, а затем переводить слова с одного языка на другой с использованием уже добавленных пар.
Более конкретно объект t типа Translator должен допускать следующие действия:
Создание с использованием конструктора по умолчанию. В этом случае база переводов пуста.
Добавление двуязычной пары: t.Add(source, target). После такого вызова считается, что слово source на языке 1 соответствует слову target на языке 2. Переданные в метод Add строки могут быть уничтожены раньше объекта t.
Перевод с языка 1 на язык 2: t.TranslateForward(source). Если ранее уже был вызов t.Add(source_copy, target) для некоторой строки target и строки source_copy, равной source или являющейся ей, нужно вернуть target. Если такого вызова не было — вернуть пустую строку. Если таких вызовов было несколько — вернуть target для последнего из них.
Перевод с языка 2 на язык 1: t.TranslateBackward(target). Если ранее уже был вызов t.Add(source, target_copy) для некоторой строки source и строки target_copy, равной target или являющейся ей, нужно вернуть source. Если такого вызова не было — вернуть пустую строку. Если таких вызовов было несколько — вернуть source для последнего из них.
Ограничения
Каждая строка должна храниться в экземпляре класса Translator не более одного раза. При нарушении этого ограничения вы получите ошибку “Memory limit exceeded”.
Пример использования
void TestSimple() {
      Translator translator;
    translator.Add(string("okno"s), string("window"s));
    translator.Add(string("stol"s), string("table"s));

    assert(translator.TranslateForward("okno"s) == "window"s);
    assert(translator.TranslateBackward("table"s) == "stol"s);
    assert(translator.TranslateForward("table"s) == ""s);
}

int main() {
    TestSimple();
    return 0;
} 
Как будет тестироваться ваш код
Проверим, что всё переводится верно, а также то, что после разрушения объектов-строк, которые были добавлены в Translator, перевод всё еще работает корректно.

Подсказка:
Самый простой способ реализации словаря — это, конечно, контейнер-словарь. В данном случае удобно держать два контейнера,
чтобы обеспечить поиск слов и для прямого перевода, и для обратного. Хранить в этих словарях строки — расточительство.
Но строки вам всё равно нужны, так как строки могут быть уничтожены до уничтожения объекта Translator. Сохраните их себе в удобном контейнере.
