Задание
Задание
Рассмотрим упрощённый текстовый редактор, который поддерживает следующий набор команд:
Перемещение курсора влево (Left) и вправо (Right) на одну позицию;
Ввод символа в текущую позицию курсора (Insert);
Копирование фрагмента текста, начинающегося в текущей позиции курсора, в буфер обмена (Copy);
Вырезание фрагмента текста — аналогично копированию с последующим удалением скопированных символов из текста (Cut);
Вставка содержимого буфера обмена в текущую позицию курсора (Paste).
Эти команды поддерживаются почти любым текстовым редактором. Для команд действуют стандартные правила, определяющие их эффект:
Если редактор содержит текст длиной n символов, курсор может находиться в одной из (n + 1) возможных позиций. Обозначим курсор вертикальной чертой | и будем использовать это обозначение дальше. В тексте abc курсор может быть в позициях: |abc, a|bc, ab|c, abc|. Поэтому команда Left не имеет эффекта, когда курсор расположен в начале текста, а Right не имеет эффекта, когда курсор находится в конце. Ни Left, ни Right не имеют эффекта, когда редактор не содержит текста.
Введённый символ располагается в позиции курсора, сдвигая курсор и весь текст справа от него на одну позицию вправо. Аналогично при вставке фрагмента длиной n курсор и текст справа от него смещаются на n позиций вправо. В таблице приведены примеры, демонстрирующие это правило.
До вставки	Вводимый символ/вставляемый фрагмент	После вставки
I	a	aI
abI	c	abcI
Ibc	a	aIbc
Iworld	hello_	hello_Iworld
hello_I	world	hello_worldI
123I78	456	123456I78
Буфер обмена изначально пуст. Вставка пустого фрагмента не имеет эффекта. Содержимое буфера не сбрасывается после вставки, а остаётся неизменным до следующей команды Copy или Cut. Копирование или вырезание фрагмента нулевой длины не оказывает влияния на текст, но опустошает буфер обмена. Курсор не смещается ни при копировании, ни при вырезании текста. Например, после вырезания из текста ab|cdef фрагмента из трёх символов получим текст ab|f.
Вам предстоит реализовать «ядро» текстового редактора, который поддерживает все описанные операции, в виде класса Editor с таким интерфейсом:
class Editor {
public:
    Editor();
    // сдвинуть курсор влево
    void Left();
    // сдвинуть курсор вправо 
    void Right();
    // вставить символ token
    void Insert(char token);
    // вырезать не более tokens символов, начиная с текущей позиции курсора
    void Cut(size_t tokens = 1);
    // cкопировать не более tokens символов, начиная с текущей позиции курсора
    void Copy(size_t tokens = 1);
    // вставить содержимое буфера в текущую позицию курсора
    void Paste();
    // получить текущее содержимое текстового редактора
    string GetText() const;
}; 
Каждой описанной команде сопоставлен метод класса Editor. Также введён метод GetText(), позволяющий получить текущее содержимое редактора в виде строки. В комментариях к методам Cut(size_t tokens) и Copy(size_t tokens) указано, что в буфер обмена попадает фрагмент длиной не более tokens символов. Это значит, что если справа от курсора располагается менее чем tokens символов, методы Cut() и Copy() должны вырезать или скопировать все символы справа.
Ограничения
Реализация класса Editor должна обрабатывать 10^6 запросов не более чем за одну секунду. При этом гарантируется, что:
Длина текста никогда не превышает 10^6 символов;
Методы Copy() и Cut() суммарно копируют/вырезают не более 10^6 символов;
Метод GetText() вызывается один раз в каждом из тестов.
Пример использования
int main() {
    Editor editor;
    const string text = "hello, world"s;
    for (char c : text) {
        editor.Insert(c);
    }
    // Текущее состояние редактора: `hello, world|`
    for (size_t i = 0; i < text.size(); ++i) {
        editor.Left();
    }
    // Текущее состояние редактора: `|hello, world`
    editor.Cut(7);
    // Текущее состояние редактора: `|world`
    // в буфере обмена находится текст `hello, `
    for (size_t i = 0; i < 5; ++i) {
        editor.Right();
    }
    // Текущее состояние редактора: `world|`
    editor.Insert(',');
    editor.Insert(' ');
    // Текущее состояние редактора: `world, |`
    editor.Paste();
    // Текущее состояние редактора: `world, hello, |`
    editor.Left();
    editor.Left();
    //Текущее состояние редактора: `world, hello|, `
    editor.Cut(3);  // Будут вырезаны 2 символа
    // Текущее состояние редактора: `world, hello|`
    cout << editor.GetText();
    return 0;
} 
Пример вывода
world, hello 

Подсказка:
Вам понадобятся два списка: один для хранения текста, а другой — для буфера вставки. Итератор — удобное решение для хранения текущей позиции курсора.
