Задание
Задание 2
Вы сделали класс ScopedPtr умным. Осталось превратить его в указатель.
Переопределите операции разыменования * и доступа к полям класса ->. При попытке вызвать их у нулевого указателя эти операции должны выбрасывать исключение std::logic_error, а не приводить к неопределённому поведению. Всё-таки это умный указатель. Перегруженная операция приведения к типу bool облегчает проверку на nullptr. 
В заготовке кода — ваше решение предыдущей задачи. На его основе реализуйте недостающие операции.
Сигнатура новых операций умного указателя:
// Умный указатель, удаляющий связанный объект при своём разрушении.
// Параметр шаблона T задаёт тип объекта, на который ссылается указатель
template <typename T>
class ScopedPtr {
public:
    //...

    // Оператор приведения к типу bool позволяет узнать, ссылается ли умный указатель
    // на какой-либо объект
    explicit operator bool() const noexcept {
        // Реализуйте самостоятельно
    }

    // Оператор разыменования возвращает ссылку на объект
    // Выбрасывает исключение std::logic_error, если указатель нулевой
    T& operator*() const {
        // Реализуйте самостоятельно
    }

    // Оператор -> должен возвращать указатель на объект
    // Выбрасывает исключение std::logic_error, если указатель нулевой
    T* operator->() const {
        // Реализуйте самостоятельно
    }

    // ...

private:
    T* ptr_ = nullptr;
}; 
Оператор преобразования к типу bool объявлен explicit, чтобы запретить неявное преобразование указателя в bool, которое практически всегда нежелательно. На проверке указателя в условии if это не отразится.
void Fn(int i);

int main() {
    ScopedPtr<Object> p(new Object());
    Fn(p); // Когда operator bool объявлен explicit, здесь будет ошибка компиляции
           // Без explicit в Fn будет передано значение 1
} 
Пример использования ScopedPtr и тесты, которые помогут вам решить задачу, даны ниже.
#include <cassert>

// Умный указатель, удаляющий связанный объект при своём разрушении.
// Параметр шаблона T задаёт тип объекта, на который ссылается указатель
template <typename T>
class ScopedPtr {
    ...
};

// Этот main тестирует класс ScopedPtr
int main() {
    // Проверка работы оператора приведения к типу bool
    {
        // Для нулевого указателя приведение к типу bool возвращает false
        const ScopedPtr<int> empty_ptr;
        assert(!empty_ptr);

        // Для ненулевого указателя приведение к типу bool возвращает true
        const ScopedPtr<int> ptr_to_existing_object(new int(0));
        assert(ptr_to_existing_object);

        static_assert(noexcept(static_cast<bool>(ptr_to_existing_object)));
    }

    // Проверка работы оператора разыменования *
    {
        string* raw_ptr = new string("hello");
        ScopedPtr<string> smart_ptr(raw_ptr);
        // Ссылка, возвращаемая оператором разыменования, должна ссылаться на объект,
        // на который указывает умный указатель
        assert(&*smart_ptr == raw_ptr);

        try {
            ScopedPtr<int> empty_ptr;
            // При попытке разыменовать пустой указатель должно быть выброшено
            // исключение logic_error
            *empty_ptr;
            // Сюда попасть мы не должны
            assert(false);
        } catch (const logic_error&) {
            // мы там, где нужно
        } catch (...) {
            // Других исключений выбрасываться не должно
            assert(false);
        }
    }

    // Проверка работы оператора ->
    {
        string* raw_ptr = new string("hello");
        ScopedPtr<string> smart_ptr(raw_ptr);
        // Доступ к членам класса через умный указатель должен быть аналогичен
        // доступу через "сырой" указатель
        assert(smart_ptr->data() == raw_ptr->data());

        try {
            ScopedPtr<string> empty_ptr;
            // При попытке разыменовать пустой указатель должно быть выброшено
            // исключение logic_error
            empty_ptr->clear();
            // Сюда попасть мы не должны
            assert(false);
        } catch (const logic_error&) {
            // мы там, где нужно
        } catch (...) {
            // Других исключений выбрасываться не должно
            assert(false);
        }
    }

    // Пример использования
    {
        // На этой структуре будет проверяться работа умного указателя
        struct Object {
            Object() {
                cout << "Object is default constructed"s << endl;
            }
            void DoSomething() {
                cout << "Doing something"s << endl;
            }
            ~Object() {
                cout << "Object is destroyed"s << endl;
            }
        };

        // Сконструированный по умолчанию указатель ссылается на nullptr
        ScopedPtr<Object> empty_smart_ptr;
        // Перегруженный оператор приведения к типу bool вернёт false для пустого указателя
        assert(!empty_smart_ptr);

        ScopedPtr<Object> smart_ptr(new Object());
        // Перегруженный оператор bool вернёт true для указателя, ссылающегося на объект
        assert(smart_ptr);

        // Проверка оператора разыменования
        (*smart_ptr).DoSomething();
        // Проверка оператора доступа к членам класса
        smart_ptr->DoSomething();
    }
} 
Ограничения
Указатели, передаваемые в методы класса, либо ссылаются на объект, созданный в куче при помощи операции new, либо равны nullptr.
Как и что отправлять на проверку
Только код с шаблоном класса ScopedPtr и необходимыми для его работы директивами #include. Если отправите main, она будет заменена на версию из тренажёра.
Как будет тестироваться ваш код
Шаблон класса ScopedPtr будет протестирован кодом, подобным представленному в функции main из описания задания. Сохраните сигнатуры всех публичных методов класса ScopedPtr неизменными, чтобы код скомпилировался без ошибок.

Подсказка

В операциях * и -> сначала проверьте сырой указатель на равенство nullptr и выбросьте исключение logic_error в случае, когда эти операции вызваны у пустого ScopedPtr. Если всё хорошо, верните ссылку или указатель на объект в зависимости от реализуемой операции.
В операции приведения к bool верните false, если ScopedPtr ссылается на nullptr, и true в ином случае.
