Задание
Задание
Реализуйте класс — билетную кассу. В ней регистрируют билеты методом PushTicket. Билеты нумеруются в порядке поступления: 0, 1, 2... Каждый билет имеет тип, переданный в параметре string name.
Метод GetAvailable считает количество всех билетов в данный момент. Второй метод GetAvailable считает количество билетов определённого типа.
Invalidate служит для отзыва просроченных билетов — параметр этого метода указывает номер первого актуального билета. Все билеты с меньшим номером следует аннулировать. Считается, что администрация не вызывает этот метод, если нужных билетов нет, так что метод должен удалить как минимум один билет. 
Пусть NN — суммарное количество билетов. Сложности методов должны быть такими:
PushTicket — O(1)O(1),
GetAvailable() — O(1)O(1),
GetAvailable(const string& name) — O(N)O(N),
Invalidate — амортизированная O(1)O(1).
Ограничения
Не меняйте сигнатуры методов класса TicketOffice, а также структуру Ticket. Реализации всех методов должны быть иметь сложность, описанную в условии.
Invalidate не должен удалять ещё не выпущенные билеты.
Пример
TicketOffice tickets;

tickets.PushTicket("Swan Lake"); // id - 0
tickets.PushTicket("Swan Lake"); // id - 1
tickets.PushTicket("Boris Godunov"); // id - 2
tickets.PushTicket("Boris Godunov"); // id - 3
tickets.PushTicket("Swan Lake"); // id - 4
tickets.PushTicket("Boris Godunov"); // id - 5
tickets.PushTicket("Boris Godunov"); // id - 6

cout << tickets.GetAvailable() << endl; // Вывод: 7
cout << tickets.GetAvailable("Swan Lake") << endl; // Вывод: 3
cout << tickets.GetAvailable("Boris Godunov") << endl; // Вывод: 4

// Invalidate удалит билеты с номерами 0, 1, 2:
tickets.Invalidate(3);

cout << tickets.GetAvailable() << endl; // Вывод: 4
cout << tickets.GetAvailable("Swan Lake") << endl; // Вывод: 1
cout << tickets.GetAvailable("Boris Godunov") << endl; // Вывод: 3

tickets.PushTicket("Swan Lake"); // id - 7
tickets.PushTicket("Swan Lake"); // id - 8

cout << tickets.GetAvailable("Swan Lake") << endl; // Вывод: 3 
Что отправлять на проверку
В решении должен быть класс TicketOffice с реализованными методами, а также вспомогательные директивы #include и структура Ticket.
Как будет тестироваться ваш код
Будет проверено, что класс работает правильно, методы работают эффективно, и их сложности не превышают указанных оценок.

Подсказка :
Положите билеты в deque.
В Invalidate циклом удаляйте из начала отозванные билеты.
Цикл должен выполняться, пока билеты есть и номера удаляемых билетов меньше указанного числа.
Для реализации второго варианта GetAvailable удобно использовать count_if.
