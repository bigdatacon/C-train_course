Исправьте сортировку документов в коде поисковой системы: при одинаковой — с точностью до 10⁻⁶ — релевантности сортируйте документы по убыванию рейтинга.
Пример
void PrintDocument(const Document& document) {
    cout << "{ "s
         << "document_id = "s << document.id << ", "s
         << "relevance = "s << document.relevance << ", "s
         << "rating = "s << document.rating
         << " }"s << endl;
}
int main() {
    SearchServer search_server;
    search_server.SetStopWords("и в на"s);
    search_server.AddDocument(0, "белый кот и модный ошейник"s,        DocumentStatus::ACTUAL, {8, -3});
    search_server.AddDocument(1, "пушистый кот пушистый хвост"s,       DocumentStatus::ACTUAL, {7, 2, 7});
    search_server.AddDocument(2, "ухоженный пёс выразительные глаза"s, DocumentStatus::ACTUAL, {5, -12, 2, 1});
    for (const Document& document : search_server.FindTopDocuments("ухоженный кот"s)) {
        PrintDocument(document);
    }
} 
Вывод
{ document_id = 2, relevance = 0.274653, rating = -1 }
{ document_id = 1, relevance = 0.101366, rating = 5 }
{ document_id = 0, relevance = 0.101366, rating = 2 } 

ПОДСКАЗКА: 

Сравните по двум параметрам без пар и кортежей, но вместо == примените std::abs и сравнение с эпсилоном.
