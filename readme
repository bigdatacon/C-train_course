Задание 1
Разработайте шаблонный класс PtrVector, оборачивающий вектор указателей. Объекты, на которые ссылаются эти указатели, должны размещаться в динамической памяти. В деструкторе PtrVector должен удалить объекты по хранящимся в нём указателям. Данные он размещает в контейнере vector.
Конструктор копирования PtrVector должен копировать объекты исходного вектора. При этом нулевые указатели исходного вектора остаются нулевыми в векторе-копии.
image

Исходный PtrVector и его копия
Ограничения
Сохраните сигнатуры всех публичных методов класса PtrVector неизменными, чтобы код скомпилировался без ошибок.
Пример
Пример использования дан в заготовке решения.
Что отправлять на проверку
В решении должна быть реализация PtrVector со всеми методами и #include-директивы. Функция main учитываться не будет.
Как будет тестироваться ваш код
Размещаемые во внутреннем векторе указатели будут ссылаться на объекты, которые созданы в куче с применением операции new либо равны nullptr.

Подсказка
В деструкторе PtrVector примените операцию delete к каждому указателю внутри items_.
Обработку исключений в коде копирующего конструктора можно упростить: используйте метод reserve и зарезервируйте в векторе место для хранения нужного количества щупалец. Тогда метод push_back не будет выбрасывать исключений.
