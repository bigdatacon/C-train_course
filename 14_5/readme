Необходимые фрагменты кода были даны в теоретической части урока. В этом задании вам нужно собрать класс Vector из имеющихся деталей.
Если будете разрабатывать и отлаживать программу в IDE на вашем компьютере, рекомендуем использовать статический анализатор clang-tidy совместно с UB и Address санитайзерами.

Это задание — первая часть итогового проекта тринадцатого спринта. Реализуйте следующие методы класса Vector:
Конструктор по умолчанию. Инициализирует вектор нулевого размера и вместимости. Не выбрасывает исключений. Алгоритмическая сложность: O(1).
Конструктор, который создаёт вектор заданного размера. Вместимость созданного вектора равна его размеру, а элементы проинициализированы значением по умолчанию для типа T. Алгоритмическая сложность: O(размер вектора).
Копирующий конструктор. Создаёт копию элементов исходного вектора. Имеет вместимость, равную размеру исходного вектора, то есть выделяет память без запаса. Алгоритмическая сложность: O(размер исходного вектора).
Деструктор. Разрушает содержащиеся в векторе элементы и освобождает занимаемую ими память. Алгоритмическая сложность: O(размер вектора).
Метод void Reserve(size_t capacity). Резервирует достаточно места, чтобы вместить количество элементов, равное capacity. Если новая вместимость не превышает текущую, метод не делает ничего. Алгоритмическая сложность: O(размер вектора).
Что отправлять на проверку
Исходный код класса Vector должен располагаться в файле vector.h.
Ограничения
Реализуйте класс Vector, не используя класс std::vector или его аналоги. Не меняйте сигнатуру публичных методов класса Vector из заготовки кода. В противном случае тренажёр может отклонить решение.
Как будет тестироваться ваш код
Работа методов класса Vector будет проверена тестами, подобными тем, что есть в заготовке кода. Обеспечение гарантий безопасности исключений проверяться не будет. Тем не менее, если исключения не выбрасываются, методы и конструкторы класса Vector должны работать корректно.
Чтобы проверить работу с указателями и динамической памятью, код будет скомпилирован со включёнными UB и Address санитайзерами.
Код класса Vector не должен ничего выводить в stderr и stdout. В противном случае тренажёр отклонит решение.
Функция main будет заменена кодом из тренажёра.
