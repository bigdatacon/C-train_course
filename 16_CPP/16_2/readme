Чтобы проверить деление на 0, можно использовать метод std::isfinite()
Задание 1
Реализуйте метод Execute() для класса FormulaAST, то есть «‎научите»‎ дерево вычислять формулу. 
Для каждого дочернего класса класса Expr реализуйте метод Evaluate(). Он вычисляет значение формулы, соответствующей дереву с вершиной в этом узле. Тогда для вычисления всей формулы надо вызвать Evaluate() от корня дерева:
double FormulaAST::Execute() const {
    return root_expr_->Evaluate();
} 
Для класса NumberExpr : Expr метод Evaluate() будет возвращать значение самого числа. 
Для сложения в классе BinaryOpExpr : Expr метод должен вернуть сумму значений Evaluate() левого и правого потомков.
При делении может возникнуть деление на 0, и результат вычисления не может быть определен. Функция Evaluate() должна кидать ошибку вычисления FormulaError с текстом "DIV/0". Она определена в файле common.h.
Обратите внимание на метод void FormulaAST::PrintFormula(std::ostream& out). Он выводит в поток формулу в «очищенном»‎ виде, то есть без лишних скобок. Например, формула, заданная строкой “(1+(23))”, выведется так: “1+23”. Этот метод пригодится для дальнейших заданий.
Формат входных данных
В этом задании проверяется вычисление формул, а не их парсинг. Поэтому будем использовать только синтаксически корректные формулы, например: “1+2*3-4/5”.
Пример
Результат вычисления формулы “1+2*3-4/5” — число 6.2.
Результат вычисления формулы “1/(4-2*2)” — исключение: ошибка вычисления FormulaError.
Ограничения
Не меняйте никакие файлы кроме FormulaAST.cpp. 
Что отправлять на проверку
Реализуйте методы Evaluate() для BinaryOpExpr, UnaryOpExpr и NumberExpr в файле FormulaAST.cpp.
Как будет тестироваться ваш код
Мы будем тестировать то, что вы реализовали в файле FormulaAST.cpp. 
Мы протестируем метод double FormulaAST::Execute(). Для этого вызовем метод FormulaAST ParseFormulaAST(const std::string& in_str);, чтобы создать объект FormulaAST. Строка in_str будет содержать синтаксически корректную формулу. Затем у полученного объекта FormulaAST будем вызывать метод Execute().
Возможные тесты вы найдёте в файле main.cpp.
