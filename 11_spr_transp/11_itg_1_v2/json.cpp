#include "json.h"

/*
 * ÃÂÒÚÓ ‰Îˇ ‚‡¯ÂÈ JSON-·Ë·ÎËÓÚÂÍË
 */

#include <algorithm>
#include <cctype>
#include <iostream>
#include <sstream>
#include <string>
#include "json.h"

using namespace std;

namespace json {

    namespace {
        string Trim(string_view str) {
            while (!str.empty() && (str.front() == ' ' || str.front() == '\t'
                || str.front() == '\n' || str.front() == '\r')) {
                str.remove_prefix(1);
            }
            while (!str.empty() && (str.back() == ' ' || str.back() == '\t'
                || str.back() == '\n' || str.back() == '\r')) {
                str.remove_suffix(1);
            }
            return string(str);
        }

        Node LoadNode(istream& input);

        Node LoadNull(istream& input) {
            string null;
            getline(input, null, ',');
            null = Trim(null);
            if (null == "null") {
                input.putback(',');
                return Node(nullptr);
            }
            else {
                throw ParsingError("Invalid null argument");
            }
        }

        Node LoadBool(istream& input) {
            string str;
            //input >> str;
            getline(input, str, ',');
            str = Trim(str);
            if (str == "true") {
                input.putback(',');
                return Node(true);
                //return Node("true");
            }
            else if (str == "false") {
                input.putback(',');
                return Node(false);
                //return Node("false");
            }
            else {
                throw ParsingError("Invalid boolean value: " + str);
            }
        }

        Node LoadArray(istream& input) {
            Array array;
            char c;
            input >> c;
            if (c != '[') {
                throw ParsingError("Error: Expected '['");
            }
            while (input.peek() != ']') {
                input >> std::ws;  // –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
                array.push_back(LoadNode(input));
                input >> std::ws;  // –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
                if (input.peek() == ',') {
                    input >> c;  // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—è—Ç—É—é
                }
                else if (input.peek() != ']') {
                    throw ParsingError("Error: Expected ',' or ']'");
                }
            }
            input >> c;  // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º ']'

            return Node(move(array));
        }

        using Number = std::variant<int, double>;

        Node LoadNumber(std::istream& input) {
            using namespace std::literals;

            std::string parsed_num;

            // –°—á–∏—Ç—ã–≤–∞–µ—Ç –≤ parsed_num –æ—á–µ—Ä–µ–¥–Ω–æ–π —Å–∏–º–≤–æ–ª –∏–∑ input
            auto read_char = [&parsed_num, &input] {
                parsed_num += static_cast<char>(input.get());
                if (!input) {
                    throw ParsingError("Failed to read number from stream"s);
                }
            };

            // –°—á–∏—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∏–ª–∏ –±–æ–ª–µ–µ —Ü–∏—Ñ—Ä –≤ parsed_num –∏–∑ input
            auto read_digits = [&input, read_char] {
                if (!std::isdigit(input.peek())) {
                    throw ParsingError("A digit is expected"s);
                }
                while (std::isdigit(input.peek())) {
                    read_char();
                }
            };

            if (input.peek() == '-') {
                read_char();
            }
            // –ü–∞—Ä—Å–∏–º —Ü–µ–ª—É—é —á–∞—Å—Ç—å —á–∏—Å–ª–∞
            if (input.peek() == '0') {
                read_char();
                // –ü–æ—Å–ª–µ 0 –≤ JSON –Ω–µ –º–æ–≥—É—Ç –∏–¥—Ç–∏ –¥—Ä—É–≥–∏–µ —Ü–∏—Ñ—Ä—ã
            }
            else {
                read_digits();
            }

            bool is_int = true;
            // –ü–∞—Ä—Å–∏–º –¥—Ä–æ–±–Ω—É—é —á–∞—Å—Ç—å —á–∏—Å–ª–∞
            if (input.peek() == '.') {
                read_char();
                read_digits();
                is_int = false;
            }

            // –ü–∞—Ä—Å–∏–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é —á–∞—Å—Ç—å —á–∏—Å–ª–∞
            if (int ch = input.peek(); ch == 'e' || ch == 'E') {
                read_char();
                if (ch = input.peek(); ch == '+' || ch == '-') {
                    read_char();
                }
                read_digits();
                is_int = false;
            }

            try {
                if (is_int) {
                    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ int
                    try {
                        return Node(std::move(std::stoi(parsed_num)));
                    }
                    catch (...) {
                        // –í —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–∏,
                        // –∫–æ–¥ –Ω–∏–∂–µ –ø–æ–ø—Ä–æ–±—É–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ double
                    }
                }
                return Node(std::move(std::stod(parsed_num)));
            }
            catch (...) {
                throw ParsingError("Failed to convert "s + parsed_num + " to number"s);
            }
        }

        // –°—á–∏—Ç—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ª–∏—Ç–µ—Ä–∞–ª–∞ JSON-–¥–æ–∫—É–º–µ–Ω—Ç–∞
        // –§—É–Ω–∫—Ü–∏—é —Å–ª–µ–¥—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã–≤–∞—é—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ ":
        Node LoadString(std::istream& input) {
            using namespace std::literals;

            auto it = std::istreambuf_iterator<char>(input);
            auto end = std::istreambuf_iterator<char>();
            std::string s;
            while (true) {
                if (it == end) {
                    // –ü–æ—Ç–æ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –¥–æ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É?
                    throw ParsingError("String parsing error");
                }
                const char ch = *it;
                if (ch == '"') {
                    // –í—Å—Ç—Ä–µ—Ç–∏–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é –∫–∞–≤—ã—á–∫—É
                    ++it;
                    break;
                }
                else if (ch == '\\') {
                    // –í—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–∞—á–∞–ª–æ escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    ++it;
                    if (it == end) {
                        // –ü–æ—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–∏–º–≤–æ–ª–∞ –æ–±—Ä–∞—Ç–Ω–æ–π –∫–æ—Å–æ–π —á–µ—Ä—Ç—ã
                        throw ParsingError("String parsing error");
                    }
                    const char escaped_char = *(it);
                    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–¥–Ω—É –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: \\, \n, \t, \r, \"
                    switch (escaped_char) {
                    case 'n':
                        s.push_back('\n');
                        break;
                    case 't':
                        s.push_back('\t');
                        break;
                    case 'r':
                        s.push_back('\r');
                        break;
                    case '"':
                        s.push_back('"');
                        break;
                    case '\\':
                        s.push_back('\\');
                        break;
                    default:
                        // –í—Å—Ç—Ä–µ—Ç–∏–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é escape-–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                        throw ParsingError("Unrecognized escape sequence \\"s + escaped_char);
                    }
                }
                else if (ch == '\n' || ch == '\r') {
                    // –°—Ç—Ä–æ–∫–æ–≤—ã–π –ª–∏—Ç–µ—Ä–∞–ª –≤–Ω—É—Ç—Ä–∏- JSON –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ—Ä—ã–≤–∞—Ç—å—Å—è —Å–∏–º–≤–æ–ª–∞–º–∏ \r –∏–ª–∏ \n
                    throw ParsingError("Unexpected end of line"s);
                }
                else {
                    // –ü—Ä–æ—Å—Ç–æ —Å—á–∏—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥–Ω–æ–π —Å–∏–º–≤–æ–ª –∏ –ø–æ–º–µ—â–∞–µ–º –µ–≥–æ –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
                    s.push_back(ch);
                }
                ++it;
            }
            return Node(std::move(s));
        }

        Node LoadDict(istream& input) {
            Dict dict;

            char c;
            input >> c;
            if (c != '{') {
                throw ParsingError("Error: Expected '{'");
            }
            while (input.peek() != '}') {
                input >> ws;  // –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
                input >> c;
                string key = LoadString(input).AsString();
                input >> c;
                input >> std::ws;  // –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
                dict[key] = LoadNode(input);
                input >> std::ws;  // –æ—á–∏—Å—Ç–∫–∞ –ø–æ—Ç–æ–∫–∞ –æ—Ç –ø—Ä–æ–±–µ–ª–æ–≤
                if (input.peek() == ',') {
                    input >> c;  // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø—è—Ç—É—é
                    input >> std::ws;
                }

            }
            if (input.peek() != '}') {
                throw ParsingError("Error: Expected ',' or '}'");
            }
            input >> c;  // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º '}'

            return Node(move(dict));
        }

        Node LoadNode(istream& input) {
            input >> ws;
            char c;
            input >> c;
            if (c == 'n') {
                input.putback(c);
                return LoadNull(input);
            }
            /*else if (c == 't' || c == 'f') {
                input.putback(c);
                return LoadBool(input);
                //return LoadString(input);
            }*/
            else if (c == '\"') {
                return LoadString(input);
            }
            else if (c == '[') {
                input.putback(c);
                return LoadArray(input);
            }
            else if (c == '{') {
                input.putback(c);
                return LoadDict(input);
            }
            else {
                input.putback(c);
                return LoadNumber(input);
            }
        }

    }  // namespace

    Node::Node(std::nullptr_t) : value_(nullptr) {}
    Node::Node(int val) : value_(val) {}
    Node::Node(double val) : value_(val) {}
    Node::Node(std::string val) : value_(std::move(val)) {}
    Node::Node(bool val) : value_(val) {}
    Node::Node(const Dict& val) : value_(val) {}
    Node::Node(Dict&& val) : value_(std::move(val)) {}
    Node::Node(const Array& val) : value_(val) {}
    Node::Node(Array&& val) : value_(std::move(val)) {}

    bool Node::IsInt() const {
        return std::holds_alternative<int>(value_);
    }
    bool Node::IsDouble() const {
        bool result = false;
        if (std::holds_alternative<double>(value_) || std::holds_alternative<int>(value_)) {
            result = true;
        }
        return result;
    }
    bool Node::IsPureDouble() const {
        return std::holds_alternative<double>(value_);
    }
    bool Node::IsBool() const {
        return std::holds_alternative<bool>(value_);
    }
    bool Node::IsString() const {
        return std::holds_alternative<std::string>(value_);
    }
    bool Node::IsNull() const {
        bool a = std::holds_alternative<std::nullptr_t>(value_);
        return a;
    }
    bool Node::IsArray() const {
        return std::holds_alternative<Array>(value_);
    }
    bool Node::IsMap() const {
        return std::holds_alternative<Dict>(value_);
    }

    int Node::AsInt() const {
        if (auto val = std::get_if<int>(&value_)) {
            return *val;
        }
        else {
            throw std::logic_error("Node value is not an int");
        }
    }
    bool Node::AsBool() const {
        if (auto val = std::get_if<bool>(&value_)) {
            return *val;
        }
        else {
            throw std::logic_error("Node value is not a bool");
        }
    }
    double Node::AsDouble() const {
        if (auto val = std::get_if<double>(&value_)) {
            return *val;
        }
        else if (auto val = std::get_if<int>(&value_)) {
            return static_cast<double>(*val);
        }
        else {
            throw std::logic_error("Node value is not a double");
        }
    }
    const std::string& Node::AsString() const {
        if (auto val = std::get_if<std::string>(&value_)) {
            return *val;
        }
        else {
            throw std::logic_error("Node value is not a string");
        }
    }
    const Array& Node::AsArray() const {
        if (auto val = std::get_if<Array>(&value_)) {
            return *val;
        }
        else {
            throw std::logic_error("Node value is not an array");
        }
    }
    const Dict& Node::AsMap() const {
        if (auto val = std::get_if<Dict>(&value_)) {
            return *val;
        }
        else {
            throw std::logic_error("Node value is not a map");
        }
    }

    /*bool operator==(const Node& lhs, const Node& rhs) {
        if (lhs.GetValue().index() != rhs.GetValue().index()) {
            return false;
        }
        if (std::holds_alternative<std::nullptr_t>(lhs.GetValue())) {
            return true;
        }
        return lhs.GetValue() == rhs.GetValue();
    }

    bool operator!=(const Node& lhs, const Node& rhs) {
        return !(lhs == rhs);
    }*/

    /*bool operator==(const Document& lhs, const Document& rhs) {
        return lhs.GetRoot() == rhs.GetRoot();
    }
    bool operator!=(const Document& lhs, const Document& rhs) {
        return lhs.GetRoot() != rhs.GetRoot();
    }*/

    Document::Document(Node root)
        : root_(move(root)) {
    }

    const Node& Document::GetRoot() const {
        return root_;
    }

    Document Load(istream& input) {
        return Document{ LoadNode(input) };
    }
    template <typename V>
    void PrintNode(const V& node, std::ostream& out);

    void PrintValue(const int value, std::ostream& out) {
        out << value;
    }
    void PrintValue(const double value, std::ostream& out) {
        out << value;
    }
    void PrintValue(bool value, std::ostream& out) {
        out << boolalpha << value;
    }
    void ParsingOutString(const std::string& value, std::ostream& out) {
        std::string result;
        for (char c : value) {
            if (c == '\r') {        // —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º '\r'
                result += "\\r";
            }
            else if (c == '\n') { // —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º '\n'
                result += "\\n";
            }
            else if (c == '\t') {
                result += "\t";     // —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–∏–º–≤–æ–ª '\t' –Ω–µ –Ω—É–∂–Ω–æ
            }
            else if (c == '\\') {
                result += "\\\\";   // –ü—Ä–∏ '\' –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø —Å–∏–º–≤–æ–ª '\'
            }
            else if (c == '\"') {
                result += "\\\"";   // –ü—Ä–∏ '\"' –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø —Å–∏–º–≤–æ–ª '\'
            }
            else {
                result += c;
            }
        }
        out << "\"" << result << "\""; // –í –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏
    }

    void PrintValue(const std::string& value, std::ostream& out) {
        ParsingOutString(value, out);
    }

    void PrintValue(std::nullptr_t, std::ostream& out) {
        out << "null";
    }
    // –î—Ä—É–≥–∏–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏ —Ñ—É–Ω–∫—Ü–∏–∏ PrintValue –ø–∏—à—É—Ç—Å—è –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ
    void PrintValue(const Array& value, std::ostream& out) {
        out << "["; // –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –º–∞—Å—Å–∏–≤–∞
        bool is_first = true;
        for (const auto& val : value) {
            if (!is_first) {
                out << ",";
            }
            PrintNode(val, out);
            is_first = false;
        }
        out << "]"; // –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É –º–∞—Å—Å–∏–≤–∞
    }

    void PrintValue(const Dict& value, std::ostream& out) {
        out << "{"; // –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É —Å–ª–æ–≤–∞—Ä—è
        bool is_first = true;
        for (const auto& [key, val] : value) {
            if (!is_first) {
                out << ", ";
            }
            out << "\"" << key << "\": ";
            PrintNode(val, out);

            is_first = false;
        }
        out << '}';
    }

    void PrintNode(const Node& node, std::ostream& out) {
        std::visit(
            [&out](const auto& value) { PrintValue(value, out); },
            node.GetValue());
    }

    void Print(const Document& doc, std::ostream& output) {
        PrintNode(doc.GetRoot(), output);

        // – –µ–∞–ª–∏–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
    }


}  // namespace json